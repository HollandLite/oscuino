OSCuino is a full-featured implementation of the OSC 1.0 communication protocol for Arduino.

Features:

- Supports the four basic OSC data types (integers, floats, strings, and blobs)
- Send and receive messages over any transport layer that implements the Arduino’s Stream - Class such as Serial, EthernetUdp, MIDI, and more.
- Address pattern matching
- Static memory consumption
- Compatible with Arduino 1.0 API and coding style
- 64-bit timetags

////////////////////////////////////////////////////////////////////////
API

ANALOG
These are the basic analog Arduino functions with the option of using the internal pullup available on most Arduinos. All analog pins can be used as digital outputs also. 

/a/(pin #)
	(no data) = analogRead with pullup off
	/u = analogRead with pullup on
	(value 0/1) = digitalWrite with that value

example:
"/a/0/u" performs analogRead with pullup on on pin 0. 
"/a/8 1" performs digitalWrite on pin 8 of HIGH.

DIGITAL
The basic digital Arduino functions with the option of using the internal pullup available on most Arduinos. 

/d/(pin #)
	(no data) = digitalRead with pullup off
	/u = digitalRead with pullup on
	(value 0/1) = digitalWrite with that value

example:
"/d/1" performs digitalRead with pullup off on pin 0. 
"/d/[0-4] 0" performs digitalWrite LOW on pins 0 through 4.

PWM
PWM can be called on all pins with an automatic fallback to software PWM using the SoftPWM library on pins that don't support hardware PWM. Software PWM needs to be turned off if you want to use that pin for anything else, otherwise it will continue to update the pin.

/p/(pin #)
	(value 0-255) = analogWrite with that value
	/e = ends the SoftPWM on that pin
	/h = returns 0/1 if the pin has hardware PWM. 



example:
"/p/0 128" sets the PWM on pin 0
"/d/0/h" returns 1 if pin 0 has hardware PWM

SERVO
Arduino supports up to 8 servos. Attach the servo to a specific pin and detach the servo if you want to use that pin for something else. This uses Arduino's Servo library. 

/v/(servo # 0-7)
	(value 0-179) = writes that angle to the servo
	/a (pin) = attach the servo to a pin
 	/e = detach the servo from the pin 

example:
"/v/1 1" attach servo 1 to pin 1.
"/v/1 90" moves servo 1 to 90 degrees

STEPPER
The stepper is by default disabled. Change STEPPER_ENABLED to 1 in the sketch to enable it and select the pins that you want the stepper to use. This uses Arduino's Stepper library. 

/t
	(value) = step to that value
	/s = set the stepper speed

example:
"/t 20" steps 20 steps. 
"/t 50" sets the stepper speed to 50 rpm. 

////////////////////////////////////////////////////////////////////////
GETTING STARTED

OSCuino is composed of two classes: oMESSAGE and oBUNDLE. oMESSAGE contains the address, type, and data and oBUNDLE is a bundle of oMESSAGEs with a timetag. To start sending data over the Arduino’s Serial port simply construct an oBUNDLE with Serial as the constructor argument, add some oMESSAGEs with some data, and send it off:


#include <oMESSAGE.h>
#include <oBUNDLE.h>
#include <SLIPEncodedSerial.h>

void setup(){
   SLIPSerial.begin(38400);
}

oBUNDLE bndl(SLIPSerial); //using SLIPSerial as the transport layer

void loop(){
  bndl.addMessage("/analog/0").add(analogRead(0));
  bndl.addMessage("/analog/1").add(analogRead(1)); 
  bndl.send();  
  SLIPSerial.endTransmission();
}


////////////////////////////////////////////////////////////////////////

SLIPSerial

The source also includes an extension of the Serial object which sends and receives data using the SLIP encoding (you can read more about that here http://www.cse.iitb.ac.in/~bestin/btech-proj/slip/x365.html). This makes Max/MSP integration very simple using CNMAT's slipOSC object connected to the Serial object. The SLIPSerial object has the same methods as the Serial object except for an additional "endTransmission" method which transmits the "End Of Transmission" character (octal 300) which is the message delimiter for the SLIP encoding. 

////////////////////////////////////////////////////////////////////////

Installation

Place the contents of the "src" folder into a file titled "libraries" inside of your Arduino Sketch search path. After restarting the Arduino IDE, those libraries should be visible under the menu Sketch->Import Library. 

For the Max/MSP examples to work, you'll need to download the odot objects available at http://cnmat.berkeley.edu/downloads/odot (sorry Mac only right now) and the CNMAT Everything download http://cnmat.berkeley.edu/downloads